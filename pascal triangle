class Solution {
    public int nCr(int n, int r){
        int res = 1;
        for(int i=0;i<r;i++){
            res *= (n-i);
            res /= (i+1);
        }
        return res;
    }
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> pascal = new ArrayList<List<Integer>>();
        for(int r=1;r<=numRows;r++){
             List<Integer> one = new ArrayList<>();
            for(int c=1;c<=r;c++){
                one.add(nCr(r-1,c-1));
            }
            pascal.add(one);
        }
         return pascal;
    }
}

We can optimize this calculation by the following observation. 
Assume, given r = 7, c = 4. 
Now, n = r-1 = 7-1 = 6 and r = c-1 = 4-1 = 3
Letâ€™s calculate 6C3 = 6! / (3! *(6-3)!) = (6*5*4*3*2*1) / ((3*2*1)*(3*2*1))
This will boil down to (6*5*4) / (3*2*1)
So, nCr = (n*(n-1)*(n-2)*.....*(n-r+1)) / (r*(r-1)*(r-2)*....1)
(n / 1)*((n-1) / 2)*.....*((n-r+1) / r).
